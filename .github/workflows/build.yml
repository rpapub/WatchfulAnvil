name: Build and Version

on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - fix/*
      - release/*
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for GitVersion

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install GitVersion
        run: dotnet tool install --global GitVersion.Tool

      - name: Determine Version
        run: |
          VERSION_JSON=$(dotnet-gitversion /output json)
          FULL_VERSION=$(echo $VERSION_JSON | jq -r '.FullSemVer')
          FILE_VERSION=$(echo $VERSION_JSON | jq -r '.AssemblySemFileVer')
          ASSEMBLY_VERSION=$(echo $VERSION_JSON | jq -r '.AssemblySemVer')
      
          # Ensure NuGet Package Version is valid
          NUGET_VERSION=$(echo $VERSION_JSON | jq -r '.NuGetVersionV2')
          if [[ -z "$NUGET_VERSION" || "$NUGET_VERSION" == "null" ]]; then
            NUGET_VERSION=$FULL_VERSION
          fi
      
          # Export versions to GitHub environment variables
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
          echo "FILE_VERSION=$FILE_VERSION" >> $GITHUB_ENV
          echo "ASSEMBLY_VERSION=$ASSEMBLY_VERSION" >> $GITHUB_ENV
          echo "NUGET_VERSION=$NUGET_VERSION" >> $GITHUB_ENV
      
          # Debug output
          echo "ðŸ”¹ Resolved Full Version: $FULL_VERSION"
          echo "ðŸ”¹ Resolved NuGet Version: $NUGET_VERSION"

      - name: Add UiPath NuGet Source
        run: |
          dotnet nuget add source "https://uipath.pkgs.visualstudio.com/Public.Feeds/_packaging/UiPath-Official/nuget/v3/index.json" --name UiPath-Official

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Solution
        run: |
          dotnet build --configuration Release \
            /p:Version=${{ env.FULL_VERSION }} \
            /p:FileVersion=${{ env.FILE_VERSION }} \
            /p:AssemblyVersion=${{ env.ASSEMBLY_VERSION }}

      - name: Pack NuGet Package
        run: |
          dotnet pack --configuration Release --no-build --output ./nupkg \
            /p:PackageVersion=${{ env.NUGET_VERSION }} \
            /p:Version=${{ env.FULL_VERSION }} \
            /p:FileVersion=${{ env.FILE_VERSION }} \
            /p:AssemblyVersion=${{ env.ASSEMBLY_VERSION }}

      - name: Debug Build Output
        run: ls -R src/**/bin/Release/

      - name: Get Built File Names
        run: |
          DLL_NAME=$(find src -type f -name "*.dll" -path "*/bin/Release/*" | head -n 1 | xargs -n 1 basename)
          NUPKG_NAME=$(find nupkg -type f -name "*.nupkg" | head -n 1 | xargs -n 1 basename)

          echo "DLL_NAME=${DLL_NAME}" >> $GITHUB_ENV
          echo "NUPKG_NAME=${NUPKG_NAME}" >> $GITHUB_ENV
          echo "ðŸ”¹ DLL Name: ${DLL_NAME}"
          echo "ðŸ”¹ NuGet Package Name: ${NUPKG_NAME}"

      - name: Upload DLL Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DLL_NAME }}-${{ env.FULL_VERSION }}
          path: src/**/bin/Release/**/*.dll

      - name: Upload NuGet Package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NUPKG_NAME }}-${{ env.FULL_VERSION }}
          path: nupkg/**/*.nupkg

#      - name: Publish NuGet Package (Pre-release)
#        if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
#        run: dotnet nuget push "nupkg/**/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
#
#      - name: Publish NuGet Package (Stable)
#        if: startsWith(github.ref, 'refs/tags/v')
#        run: dotnet nuget push "nupkg/**/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
